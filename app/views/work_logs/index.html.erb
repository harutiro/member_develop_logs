<div class="container mx-auto px-4 py-8">
  <h1 class="text-2xl font-bold mb-6">作業時間管理</h1>
  
  <div class="mb-8">
    <%= form_tag work_logs_path, method: :get, class: "flex gap-4 items-end", data: { turbo: false } do %>
      <div>
        <%= label_tag :member_id, "メンバー" %>
        <%= select_tag :member_id, 
            options_from_collection_for_select(@members, :id, :name, @selected_member&.id),
            class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500",
            onchange: "this.form.submit()" %>
      </div>
    <% end %>
  </div>
  
  <% if @selected_member %>
    <div class="mb-8">
      <div class="bg-white p-6 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4"><%= @selected_member.name %>の作業状況</h2>
        <div id="work-status">
          <% if @active_work_log %>
            <div class="space-y-4">
              <div class="bg-gray-50 p-4 rounded-lg">
                <div class="text-lg font-medium text-gray-900 mb-2">作業開始時間</div>
                <div class="text-3xl font-bold text-indigo-600">
                  <%= @active_work_log.start_time.strftime("%H:%M") %>
                </div>
                <div class="text-sm text-gray-500 mt-1">
                  <%= @active_work_log.start_time.strftime("%Y年%m月%d日") %>
                </div>
              </div>
              
              <div class="bg-gray-50 p-4 rounded-lg">
                <div class="text-lg font-medium text-gray-900 mb-2">現在の作業時間</div>
                <div class="text-3xl font-bold text-green-600" id="current-duration">
                  <%= ((Time.current - @active_work_log.start_time) / 3600).round(1) %>時間
                </div>
              </div>

              <%= form_tag end_work_work_logs_path, method: :post, data: { turbo: false } do %>
                <%= hidden_field_tag :member_id, @selected_member.id %>
                <%= submit_tag "作業を終了", 
                    class: "w-full bg-red-600 text-white px-6 py-3 rounded-md hover:bg-red-700 text-lg font-medium" %>
              <% end %>
            </div>
          <% else %>
            <div class="text-center">
              <div class="text-gray-500 mb-4">作業を開始すると、ここに作業時間が表示されます</div>
              <%= form_tag start_work_work_logs_path, method: :post, data: { turbo: false } do %>
                <%= hidden_field_tag :member_id, @selected_member.id %>
                <%= submit_tag "作業を開始", 
                    class: "bg-green-600 text-white px-8 py-3 rounded-md hover:bg-green-700 text-lg font-medium",
                    onclick: "this.disabled = true; this.form.submit();" %>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  <% end %>
  
  <div class="mb-8">
    <h2 class="text-xl font-semibold mb-4">全員の日次作業時間グラフ</h2>
    <div class="bg-white p-4 rounded-lg shadow">
      <canvas id="dailyChart" width="800" height="400"></canvas>
    </div>
  </div>
  
  <% if @selected_member %>
    <div>
      <h2 class="text-xl font-semibold mb-4"><%= @selected_member.name %>の作業ログ一覧</h2>
      <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <% if @selected_member_logs.any? %>
          <ul class="divide-y divide-gray-200">
            <% @selected_member_logs.each do |log| %>
              <li class="px-6 py-4">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm font-medium text-gray-900">
                      <%= log.start_time.strftime("%Y年%m月%d日 %H:%M") %> 〜 <%= log.end_time&.strftime("%H:%M") || "作業中" %>
                    </p>
                    <p class="text-sm text-gray-500">
                      作業時間: <%= log.duration %>時間
                    </p>
                  </div>
                </div>
              </li>
            <% end %>
          </ul>
        <% else %>
          <div class="px-6 py-4 text-center text-gray-500">
            作業ログがありません
          </div>
        <% end %>
      </div>
    </div>
  <% end %>
  
  <div class="mt-8">
    <%= link_to "手動で作業時間を記録", new_work_log_path, 
        class: "bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700" %>
  </div>
</div>

<% if @daily_data.present? %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const chartElement = document.getElementById('dailyChart');
      if (chartElement) {
        const ctx = chartElement.getContext('2d');
        const data = <%= raw @daily_data.to_json %>;
        
        // 日付を日付順にソート
        const sortedDates = <%= raw @date_range.map(&:to_s).to_json %>;
        
        // グラフのデータセットを作成
        const datasets = Object.entries(data).map(([memberName, memberData], index) => {
          const colors = [
            'rgba(79, 70, 229, 0.5)',   // インディゴ
            'rgba(16, 185, 129, 0.5)',  // エメラルド
            'rgba(245, 158, 11, 0.5)',  // アンバー
            'rgba(239, 68, 68, 0.5)',   // レッド
            'rgba(59, 130, 246, 0.5)',  // ブルー
          ];
          
          return {
            label: memberName,
            data: sortedDates.map(date => memberData[date] || 0),
            backgroundColor: colors[index % colors.length],
            borderColor: colors[index % colors.length].replace('0.5', '1'),
            borderWidth: 1
          };
        });
        
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: sortedDates.map(date => {
              const d = new Date(date);
              return `${d.getMonth() + 1}/${d.getDate()}`;
            }),
            datasets: datasets
          },
          options: {
            responsive: true,
            scales: {
              x: {
                stacked: false,
                title: {
                  display: true,
                  text: '日付'
                },
                ticks: {
                  maxRotation: 45,
                  minRotation: 45
                }
              },
              y: {
                stacked: false,
                beginAtZero: true,
                title: {
                  display: true,
                  text: '作業時間（時間）'
                },
                ticks: {
                  callback: function(value) {
                    return value + '時間';
                  }
                }
              }
            },
            plugins: {
              title: {
                display: true,
                text: '日次作業時間（2週間分）'
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return `${context.dataset.label}: ${context.raw}時間`;
                  }
                }
              }
            }
          }
        });
      }

      // 作業時間の自動更新
      const currentDurationElement = document.getElementById('current-duration');
      if (currentDurationElement) {
        const startTime = new Date('<%= @active_work_log&.start_time&.iso8601 %>');
        
        function updateDuration() {
          const now = new Date();
          const duration = (now - startTime) / 3600000; // 時間に変換
          currentDurationElement.textContent = duration.toFixed(1) + '時間';
        }
        
        // 1秒ごとに更新
        setInterval(updateDuration, 1000);
        updateDuration(); // 初回実行
      }
    });
  </script>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const workStatus = document.getElementById('work-status');
  
  if (workStatus) {
    workStatus.addEventListener('click', async function(e) {
      if (e.target.matches('button')) {
        e.preventDefault();
        const button = e.target;
        const url = button.getAttribute('formaction');
        const method = button.getAttribute('formmethod');
        
        try {
          const response = await fetch(url, {
            method: method,
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Accept': 'text/html'
            }
          });
          
          if (response.ok) {
            const html = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newWorkStatus = doc.getElementById('work-status');
            
            if (newWorkStatus) {
              workStatus.innerHTML = newWorkStatus.innerHTML;
            }
            
            // ページをリロードして最新のデータを表示
            window.location.reload();
          }
        } catch (error) {
          console.error('Error:', error);
        }
      }
    });
  }
});
</script> 